from typing import Literal, Union, Optional

from pydantic import BaseModel, Field, ConfigDict
{% if should_use_config %}


class ConfigGetCommandArgs(BaseModel):
    command: Literal["get"]
    key_path: str


class ConfigSetCommandArgs(BaseModel):
    command: Literal["set"]
    key_path: str
    value: str


class ConfigListCommandArgs(BaseModel):
    command: Literal["list"]


class ConfigCommandArgs(BaseModel):
    command: Literal["config"]
    sub_command: Union[
        ConfigGetCommandArgs,
        ConfigSetCommandArgs,
        ConfigListCommandArgs
    ] = Field(discriminator="command")
{% endif %}

class {{ binary_slug | replace("_", " ") | title | replace(" ","") }}RootCommandArgs(BaseModel):
    command: Literal[None]

class {{ binary_slug | replace("_", " ") | title | replace(" ","") }}SayBearGenerateCommandArgs(BaseModel):
    command: Literal["bear"]
    msg: str


class {{ binary_slug | replace("_", " ") | title | replace(" ","") }}SayFightGenerateCommandArgs(BaseModel):
    command: Literal["fight"]
    msg: str


class {{ binary_slug | replace("_", " ") | title | replace(" ","") }}SayCommandArgs(BaseModel):
    command: Literal["say"]
    msg: Optional[str] = Field(default=None)
    sub_command: Optional[Union[
        {{ binary_slug | replace("_", " ") | title | replace(" ","") }}SayBearGenerateCommandArgs,
        {{ binary_slug | replace("_", " ") | title | replace(" ","") }}SayFightGenerateCommandArgs
    ]] = Field(discriminator="command", default=None)


{% if should_use_db %}
class {{ binary_slug | replace("_", " ") | title | replace(" ","") }}SaveCommandArgs(BaseModel):
    model_config = ConfigDict(extra="allow")
    command: Literal["save"]
    item: str


class {{ binary_slug | replace("_", " ") | title | replace(" ","") }}ListCommandArgs(BaseModel):
    model_config = ConfigDict(extra="allow")
    command: Literal["list"]
{% endif %}

{{ binary_slug | replace("_", " ") | title | replace(" ","") }}CommandArgs = Union[
    {{ binary_slug | replace("_", " ") | title | replace(" ","") }}SayCommandArgs,
    {% if should_use_db %}
    {{ binary_slug | replace("_", " ") | title | replace(" ","") }}SaveCommandArgs,
    {{ binary_slug | replace("_", " ") | title | replace(" ","") }}ListCommandArgs
    {% endif %}
]

class CommandArgs(BaseModel):
    args: Optional[
        Union[
            {% if should_use_config %}
            ConfigCommandArgs,
            {% endif %}
            {{ binary_slug | replace("_", " ") | title | replace(" ","") }}RootCommandArgs,
            {{ binary_slug | replace("_", " ") | title | replace(" ","") }}CommandArgs
        ]
    ] = Field(
        discriminator="command",
        default=None
    )
    verbose: bool = Field(default=False)

